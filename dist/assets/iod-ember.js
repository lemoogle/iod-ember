eval("//# sourceURL=assets/ember-cli/loader.js");

;eval("define(\"iod-ember/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Resolver = __dependency2__[\"default\"];\n\n    var loadInitializers = __dependency3__[\"default\"];\n\n    \r\n    Ember.MODEL_FACTORY_INJECTIONS = true;\r\n    \r\n    var App = Ember.Application.extend({\r\n      modulePrefix: \'iod-ember\', // TODO: loaded via config\r\n      Resolver: Resolver\r\n    });\r\n    \r\n    loadInitializers(App, \'iod-ember\');\r\n    \r\n    __exports__[\"default\"] = App;\n  });//# sourceURL=iod-ember/app.js");

;eval("define(\"iod-ember/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /**\r\n    \r\n    \r\n    \r\n    **/\r\n    \r\n    __exports__[\"default\"] = Ember.ObjectController.extend({\r\n        text: \'\',\r\n        autocomplete: null,\r\n    \r\n        entitiesdefault: [{\r\n            \'type\': \'places_eng\',\r\n            \'display\': \'Places\',\r\n            \'color\': \'orange\',\r\n        }, {\r\n            \'type\': \'people_eng\',\r\n            \'display\': \'People\',\r\n            \'color\': \'yellow\',\r\n        }],\r\n        actions: {\r\n            // bound to search text field, transitions to /search/my_search_text\r\n            query: function() {\r\n                this.transitionToRoute(\'search\', {\r\n                    query: this.get(\'text\'),\r\n                  //  page:1,\r\n                });\r\n            },\r\n    \r\n    \r\n            // clears autocomplete when link is clicked\r\n            ac_click: function(suggestion) {\r\n                console.log(\"THIS HAS BEEN CLICKED\");\r\n                this.get(\'autocomplete\').send(\'clear\');\r\n    \r\n                this.transitionToRoute(\'document\', encodeURIComponent(suggestion.reference));\r\n            },\r\n    \r\n            // Currently commented out until better implementation.\r\n            autocomplete: function() {\r\n                /*\r\n                var autocomplete = this.get(\'autocomplete\')\r\n                autocomplete.set(\'content\', [])\r\n                var waiting = Math.floor(Math.random() * 100) + 1;\r\n                this.set(\"autocomplete.waiting\", waiting);\r\n                var self = this\r\n                var querytext = self.get(\'text\');\r\n                Ember.$.post(apiurl + \'/1/api/sync/query/v1\', {\r\n                    \'apikey\': apikey,\r\n                    \'text\': querytext,\r\n                    \'database_match\': apiindex,\r\n                    \'max_results\': 3,\r\n                }, function(response) {\r\n                    if (self.get(\'autocomplete.waiting\') != waiting) {\r\n                        return\r\n                    }\r\n    \r\n    \r\n                    $(response.documents).each(function() {\r\n                        autocomplete.pushObject({\r\n                            \'title\': highlight(this.title, querytext.trim()),\r\n                            \'reference\': this.reference\r\n                        })\r\n                    })\r\n                    console.log(response)\r\n    \r\n                }, \'json\');\r\n    \r\n    */\r\n                // this.get(\"autocomplete\").send(\'autocomplete\')\r\n            }\r\n        },\r\n    \r\n    \r\n    });\n  });//# sourceURL=iod-ember/controllers/application.js");

;eval("define(\"iod-ember/controllers/autocomplete\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    /** @class AutocompleteController\r\n    	Content array controller for autocomplete suggestions. \r\n    **/\r\n    __exports__[\"default\"] = Ember.ArrayController.extend({\r\n        //needs: [\"application\"],\r\n        content: [],\r\n        waiting: null,\r\n    \r\n        //action to clear content ( probably better way to do this without a function )\r\n        clear: function() {\r\n            this.set(\'content\', []);\r\n        }\r\n    });\n  });//# sourceURL=iod-ember/controllers/autocomplete.js");

;eval("define(\"iod-ember/controllers/clusters\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /** Array controller for the clusters returned from the find releated concepts api on each individual search\r\n    \r\n        @class ClustersController\r\n    \r\n    \r\n    \r\n        @TODO \r\n    **/\r\n    \r\n    __exports__[\"default\"] = Ember.ArrayController.extend({\r\n        content: [],\r\n        waiting: 0,\r\n    \r\n    \r\n        // This class is the only one which puts the callback in a separate callbacks attribute rather\r\n        // than in the function that calls IOD. \r\n        // drawback to this is that scope variables need to be passed and hence another function that matches\r\n        // jquery callback needs to be returned\r\n        callbacks: {\r\n    \r\n            // handles the returned clusters from the find related concepts API\r\n            load: function(self,waiting) {\r\n                //returns another function for jquery callback\r\n                return function(response) {\r\n                    // hacky way to handle multiple clicks. \r\n                    if (self.get(\'waiting\') !== waiting) {\r\n                        return;\r\n                    }\r\n    \r\n                    var clusters = {};\r\n                    // for every entity, group them in clusters.\r\n    \r\n                    for (var i = 0; i < response.entities.length; i++) {\r\n                        var el = response.entities[i];\r\n                        //console.log(el);\r\n                        cluster = clusters[el.cluster];\r\n                        if (el.cluster >= 0) {\r\n                            if (cluster) {\r\n                                cluster.totaldocs += el.docs_with_phrase;\r\n                                cluster.docs.push(el);\r\n                            } else {\r\n                                clusters[el.cluster] = {\r\n                                    totaldocs: el.docs_with_phrase,\r\n                                    docs: [el]\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    var sortableclusters = [];\r\n    \r\n                    var sortfunction = function(a, b) {\r\n                        return b.docs_with_phrase - a.docs_with_phrase;\r\n                    };\r\n    \r\n                    // sort the entities in each cluster and limit to 5 results\r\n                    // @TODO make cluster limit configurable\r\n                    for (var clusterid in clusters) {\r\n                        var cluster = clusters[clusterid];\r\n                        cluster.docs = cluster.docs.sort(sortfunction).slice(0, 5);\r\n                        sortableclusters.push(cluster);\r\n                    }\r\n    \r\n                    // sort the list of clusters\r\n                    sortableclusters = sortableclusters.sort(function(a, b) {\r\n                        return b.totaldocs - a.totaldocs;\r\n                    });\r\n    \r\n                    // add object to concent\r\n                    for (i = 0; i < sortableclusters.length; i++) {\r\n                        self.pushObject(sortableclusters[i]);\r\n                    }\r\n    \r\n                };\r\n            }\r\n    \r\n        },\r\n    \r\n        // function that gets called when a search is ran\r\n        // calls find related concept with iodadapter.\r\n    \r\n        loadClusters: function(search) {\r\n            var self = this;\r\n            self.set(\'content\', []);\r\n            var waiting = Math.floor(Math.random() * 100) + 1;\r\n            this.set(\"waiting\", waiting);\r\n            var params = {\r\n                \'text\': search.text,\r\n                \'field_text\': search.facets,\r\n                \'sample_size\': 1000,\r\n            };\r\n            this.get(\'iodadapter\').call(\'findrelatedconcepts\', params, this.get(\'callbacks.load\')(self,waiting));\r\n    \r\n    \r\n        }\r\n    \r\n    });\n  });//# sourceURL=iod-ember/controllers/clusters.js");

;eval("define(\"iod-ember/controllers/document\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /**\r\n        @class DocumentController\r\n        \r\n        Controller for the individual document view.\r\n        a lot of terrible code in there, needs to be cleaned up and engineered better.\r\n    \r\n        Holds jquery objects as well as pure text for highlighting using jquery highlighting as an alternative to IOD highlighting.\r\n    **/\r\n    __exports__[\"default\"] = Ember.ObjectController.extend({\r\n        reference: null,\r\n        content: null,\r\n        cleancontent: \'\',\r\n        o_cleancontent: \'\',\r\n        o_content: \'\',\r\n        jquery_content: \'\',\r\n        similardocs:[],\r\n        sentimentvalue: null,\r\n        entities: [],\r\n        needs: [\'application\'],\r\n    \r\n        // check if Reference is a link currently escaped due to iframe view needing to be reengineered.\r\n        islink: function() {\r\n            return false;\r\n            //return (this.get(\'reference\').indexOf(\"http://\") !== -1) || (this.get(\'reference\').indexOf(\"https://\") !== -1);\r\n        }.property(),\r\n    \r\n    \r\n        // returns html content for view.\r\n        content_html: function() {\r\n            var data = this.get(\'content\');\r\n            if (!data) {\r\n                return \"\";\r\n            }\r\n            return (this.get(\'jquery_content\').html());\r\n        }.property(\'jquery_content\'),\r\n    \r\n        // returns formatted custom fields and values for view\r\n        customfields: function() {\r\n            var fields = [];\r\n            var data = this.get(\'content\');\r\n            if (!data) {\r\n                return [];\r\n            }\r\n            var printfields = this.get(\'iodadapter.printfields\');\r\n            for (var i = 0; i < printfields.length; i++) {\r\n                var fieldname = printfields[i];\r\n                var fieldval = data[fieldname.toLowerCase()];\r\n                if (fieldval) {\r\n                    fields.push({\r\n                        \'name\': fieldname,\r\n                        \'value\': fieldval\r\n                    });\r\n                }\r\n            }\r\n    \r\n            return fields;\r\n    \r\n        }.property(\'content\'),\r\n    \r\n        // actions are called from the view.\r\n        actions: {\r\n            // highlights in the content using IOD highlighting.\r\n            // we pass it the plain text html of what we\'re displaying.\r\n            // limitations when words to highlight present in the markup\r\n            highlight: function() {\r\n                var self = this;\r\n    \r\n                var jquery_content = self.get(\'jquery_content\');\r\n                var fd = new FormData();\r\n    \r\n                fd.append(\'text\', jquery_content.html());\r\n                fd.append(\'highlight_expression\', this.get(\'highlighttext\'));\r\n                fd.append(\'start_Tag\', \'<span class=\"highlight\">\');\r\n    \r\n                // sets the new html as content\r\n                var callback = function(response) {\r\n                    var doc = jquery_content.clone();\r\n    \r\n                    doc.html(response[\"text\"]);\r\n                    self.set(\'jquery_content\', doc);\r\n                };\r\n    \r\n                this.get(\'iodadapter\').formcall(\'highlighttext\', fd, callback);\r\n    \r\n            },\r\n    \r\n            // extracts entities and highlights using IOD highlighting\r\n            // @TODO, use highlight function with parameter for entity type rather than duplicate code.\r\n            entity: function(entity) {\r\n                // result = this.get(\"parentController\");\r\n                var self = this;\r\n    \r\n                var fd = new FormData();\r\n                fd.append(\'text\', self.get(\'content.content\'));\r\n                fd.append(\'entity_type\', entity.type);\r\n    \r\n    \r\n                var callback = function(response) {\r\n                    var doc = self.get(\'jquery_content\').clone();\r\n                    self.get(\'entities\').pushObjects(response[\"entities\"]);\r\n                    var entitytext = [];\r\n                    for (var i = 0; i < response[\"entities\"].length; i++) {\r\n    \r\n                        entitytext.push(\'\"\' + response[\"entities\"][i].normalized_text + \'\"\');\r\n    \r\n                    }\r\n                    //var self=self\r\n                    if (entitytext.length > 0) {\r\n                        console.log(entitytext.length);\r\n    \r\n                        var callback = function(response) {\r\n                            //doc = self.get(\'content\').clone();\r\n    \r\n                            doc.html(response[\"text\"]);\r\n                            self.set(\'jquery_content\', doc);\r\n    \r\n                        };\r\n                        var fd = new FormData();\r\n                        fd.append(\'text\', doc.html());\r\n                        fd.append(\'highlight_expression\', entitytext.join());\r\n                        fd.append(\'start_Tag\', \'<span class=\"highlight \' + entity.type + \'\">\');\r\n    \r\n                        self.get(\'iodadapter\').formcall(\'highlighttext\', fd, callback);\r\n    \r\n    \r\n                    }\r\n                };\r\n    \r\n                this.get(\'iodadapter\').formcall(\'extractentities\', fd, callback);\r\n    \r\n            },\r\n            /*\r\n        entitygood: function(entity) {\r\n            // result = this.get(\"parentController\");\r\n            var self = this;\r\n            Ember.$.post(apiurl + \"/1/api/sync/extractentities/v1\", {\r\n                \'apikey\': apikey,\r\n                \'text\': this.get(\'content\').html(),\r\n                \'entity_type\': entity.type,\r\n            }, function(response) {\r\n                var results = [];\r\n                console.log(response);\r\n                doc = self.get(\'jquery_content\').clone();\r\n                self.get(\'entities\').pushObjects(response[\"entities\"]);\r\n    \r\n                for (var i = 0; i < response[\"entities\"].length; i++) {\r\n     \r\n    \r\n                    doc = doc.highlight(response[\"entities\"][i].normalized_text, {\r\n                        \'elemnent\': \'span\',\r\n                        \'className\': \"highlight \" + entity.type\r\n                    });\r\n    \r\n                }\r\n                console.log(\"hello\");\r\n                console.log(self.get(\'entities\'));\r\n                self.set(\'jquery_content\',doc);\r\n    \r\n                //self.set(\"returnedEntities\", results.join(\", \"))\r\n    \r\n                //  self.returnedEntities = results.join(\", \");\r\n                //extractedentities.pushObject(entity);\r\n    \r\n            }, \"json\");\r\n        },\r\n        */\r\n    \r\n            // Same as entity extraction but does sentiment analysis.\r\n            // Users jquery highlighting instead of IOD highlighting.\r\n            sentiment: function() {\r\n                //text = this.get(\'content\');\r\n                var self = this;\r\n    \r\n                var jquery_content = self.get(\'jquery_content\');\r\n                var fd = new FormData();\r\n                fd.append(\'text\', self.get(\'content.content\'));\r\n                var callback = function(data) {\r\n    \r\n                    self.set(\'sentimentvalue\', data);\r\n    \r\n                    var doc = jquery_content.clone();\r\n                    Ember.$(data.positive).each(function() {\r\n                        doc = doc.highlight(this.original_text, {\r\n                            \'elenment\': \'span\',\r\n                            \'className\': \"highlight positive\"\r\n                        });\r\n    \r\n                        //  self.set(\'content\', highlight(self.get(\'content\'), this.original_text, false, \'mark\', \'style=\"background-color:green;\"\'))\r\n                    });\r\n                    Ember.$(data.negative).each(function() {\r\n                        doc = doc.highlight(this.original_text, {\r\n                            \'elenment\': \'span\',\r\n                            \'className\': \"highlight negative\"\r\n                        });\r\n                        //self.set(\'content\', highlight(self.get(\'content\'), this.original_text, false, \'mark\', \'style=\"background-color:red;\"\'))\r\n                    });\r\n                    self.set(\'jquery_content\', doc);\r\n                };\r\n    \r\n                this.get(\'iodadapter\').formcall(\'analyzesentiment\', fd, callback);\r\n    \r\n    \r\n    \r\n                // this.set(\'content\', highlight(this.get(\'content\'), \"b\"))\r\n            },\r\n    \r\n        },\r\n        // Loads data using print all for now. \r\n        loadData: function() {\r\n            var self = this;\r\n    \r\n            var data, callback;\r\n            if (!this.get(\'islink\')) {\r\n                //this.set(\'content\', \"OTHER\")\r\n    \r\n                data = {\r\n                    \'index_reference\': unescape(this.get(\'reference\')),\r\n                    \'print\': \'all\'\r\n                };\r\n                callback = function(response) {\r\n                    var content = Ember.$(\'<div></div>\');\r\n                    var data = response[\"documents\"][0];\r\n    \r\n                    if (data[\"content\"].length < 3) {\r\n                        data[\"content\"] = data[\"title\"];\r\n                    }\r\n                    self.set(\'content\', data);\r\n    \r\n                    var html = data[\"htmlcontent\"] || data[\"content\"];\r\n                    self.set(\'jquery_content\', content.append(html));\r\n    \r\n                    /* WITH HTML CONTENT STUFF\r\n                    // this is if there is a fied \r\n                    content.append(response[\"documents\"][0][\"htmlcontent\"])\r\n                    self.set(\'cleancontent\',response[\"documents\"][0][\"content\"])\r\n                    self.set(\'o_cleancontent\',response[\"documents\"][0][\"content\"])\r\n                    self.set(\'content\',content)\r\n                    self.set(\'o_content\',content)\r\n                    self.set(\'data\',response[\"documents\"][0])\r\n                    */\r\n                };\r\n    \r\n                this.get(\'iodadapter\').call(\'getcontent\', data, callback);\r\n    \r\n                data = {\r\n                    \'index_reference\': unescape(this.get(\'reference\')),\r\n                   // \'print\': \'all\',\r\n                    \'summary\':\'quick\',\r\n                };\r\n                callback = function(response) {\r\n    \r\n                    \r\n                    var similardocs=[];\r\n                    similardocs=response[\"documents\"];\r\n                    self.set(\'similardocs\', similardocs);\r\n                    self.propertyDidChange(\'similardocs\');\r\n                    /* WITH HTML CONTENT STUFF\r\n                    // this is if there is a fied \r\n                    content.append(response[\"documents\"][0][\"htmlcontent\"])\r\n                    self.set(\'cleancontent\',response[\"documents\"][0][\"content\"])\r\n                    self.set(\'o_cleancontent\',response[\"documents\"][0][\"content\"])\r\n                    self.set(\'content\',content)\r\n                    self.set(\'o_content\',content)\r\n                    self.set(\'data\',response[\"documents\"][0])\r\n                    */\r\n                };\r\n    \r\n                this.get(\'iodadapter\').call(\'findsimilar\', data, callback);\r\n    \r\n            } else {\r\n                // this else case if for the iframe stuff but this will be reengineered. \r\n                //CSS was injected for highlight tags, not the best way at all\r\n                callback = function(response) {\r\n                    var content = Ember.$(\'<html/>\').html(response);\r\n                    console.log(content);\r\n    \r\n                    Ember.$.when(Ember.$.get(\"css/highlight.css\"))\r\n                        .done(function(response) {\r\n                            console.log(\"DONE\");\r\n                            Ember.$(\'<style />\').text(response).appendTo(content);\r\n                            self.set(\'content\', content);\r\n    \r\n                            //a=$(\'div\').html(response);\r\n                            //content.append(a);\r\n                        });\r\n    \r\n                    // testcontent=response;\r\n                };\r\n    \r\n                data = {\r\n                    \'url\': decodeURIComponent(this.get(\'reference\'))\r\n                };\r\n    \r\n                this.get(\'iodadapter\').callhtml(\'view\', data, callback);\r\n            }\r\n    \r\n        },\r\n    \r\n        /*\r\n        sentimentgood   : function() {\r\n    \r\n            //text = this.get(\'content\');\r\n            var self = this;\r\n            console.log(self.get(\'content\').html());\r\n    \r\n    \r\n    \r\n            Ember.$.post(apiurl + \'/1/api/sync/analyzesentiment/v1\', {\'apikey\':apikey,\'text\':self.get(\'content\').html()}, function(data) {\r\n                \r\n                self.set(\'sentimentvalue\', data);\r\n    \r\n                doc = self.get(\'content\').clone();\r\n                console.log(data);\r\n                $(data.positive).each(function() {\r\n                    doc = doc.highlight(this.original_text, {\r\n                        \'elenment\': \'span\',\r\n                        \'className\': \"highlight positive\"\r\n                    });\r\n    \r\n                    //  self.set(\'content\', highlight(self.get(\'content\'), this.original_text, false, \'mark\', \'style=\"background-color:green;\"\'))\r\n                });\r\n                $(data.negative).each(function() {\r\n                    doc = doc.highlight(this.original_text, {\r\n                        \'elenment\': \'span\',\r\n                        \'className\': \"highlight negative\"\r\n                    });\r\n                    //self.set(\'content\', highlight(self.get(\'content\'), this.original_text, false, \'mark\', \'style=\"background-color:red;\"\'))\r\n                });\r\n                self.set(\'content\',doc);\r\n                //  self.set(\'content.sentimentvalue\', data);\r\n                \r\n            }, \'json\');\r\n            \r\n            // this.set(\'content\', highlight(this.get(\'content\'), \"b\"))\r\n        }\r\n        */\r\n    });\n  });//# sourceURL=iod-ember/controllers/document.js");

;eval("define(\"iod-ember/controllers/entities\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    /**	EntitiesController\r\n    	Not sure if avoidable. Array controller for entities.\r\n    **/\r\n    __exports__[\"default\"] = Ember.ArrayController.extend({\r\n        content: [],\r\n    \r\n    });\n  });//# sourceURL=iod-ember/controllers/entities.js");

;eval("define(\"iod-ember/controllers/entity\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    \r\n    __exports__[\"default\"] = Ember.ObjectController.extend({\r\n        needs: [\"results\"],\r\n        actions: {\r\n    \r\n            entity: function() {\r\n                //text = this.get(\'text\') + this.get(\'title\')\r\n                //item.extract(text);\r\n                var result = this.get(\"parentController\");\r\n                var text = result.get(\'summary\') + \" \" + result.get(\'title\');\r\n                var self = this;\r\n    \r\n    \r\n                var data = {\r\n                    \'text\': text,\r\n                    \'entity_type\': self.get(\'type\')\r\n                };\r\n    \r\n                var callback = function(response) {\r\n                    var results = [];\r\n                    for (var i = 0; i < response[\"entities\"].length; i++) {\r\n                        results.push(response[\"entities\"][i].normalized_text);\r\n                    }\r\n                    if (response[\"entities\"].length === 0) {\r\n                        self.set(\"returnedEntities\", \"No entities found\");\r\n                        return;\r\n                    }\r\n                    self.set(\"returnedEntities\", results.join(\", \"));\r\n    \r\n                    //  self.returnedEntities = results.join(\", \");\r\n                    //extractedentities.pushObject(entity);\r\n    \r\n                };\r\n    \r\n                this.get(\'iodadapter\').call(\'extractentities\',data,callback);\r\n            }\r\n        },\r\n    \r\n        allEntityObserver: function() {\r\n            this.send(\"entity\");\r\n            // this.entity();\r\n        }.observes(\"controllers.results.entities.length\")\r\n    });\n  });//# sourceURL=iod-ember/controllers/entity.js");

;eval("define(\"iod-ember/controllers/facets\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    __exports__[\"default\"] = Ember.ArrayController.extend({\r\n        content: [],\r\n        waiting: 0,\r\n    \r\n        loadFacets: function(search) {\r\n            var me = this;\r\n            //var search = App.SearchController.get(\'query\');\r\n            //App.RecentUsersController.addUser(search);\r\n            me.set(\'content\', []);\r\n            var waiting = Math.floor(Math.random() * 100) + 1;\r\n            this.set(\"waiting\", waiting);\r\n    \r\n            var callback= function(data) {\r\n                if (me.get(\'waiting\') !== waiting) {\r\n                    return;\r\n                }\r\n    \r\n    \r\n                var values=data[me.get(\'iodadapter.parametric_field\').toUpperCase()];\r\n                for (var key in values){\r\n                    me.pushObject({\'value\':key,\'count\':values[key]});\r\n                }\r\n                //console.log(me)\r\n            };\r\n    \r\n    \r\n            var data=\r\n                {\'text\': search.text,\r\n                \'field_text\': search.facets,\r\n                \'field_name\': this.get(\'iodadapter.parametric_field\'),\r\n                \'sort\':\'document_count\',\r\n                };\r\n    \r\n            this.get(\'iodadapter\').call(\'getparametricvalues\',data,callback);\r\n    \r\n    /*\r\n            Ember.$.post(CONFIG.apiurl + \"/1/api/sync/getparametricvalues/v1\", {\r\n                \'apikey\': CONFIG.apikey,\r\n                \'text\': search.text,\r\n                \'field_text\': search.facets,\r\n                \'indexes\': CONFIG.apiindex,\r\n                \'sort\':\'document_count\',\r\n                \'field_name\': CONFIG.parametric_field,\r\n            }, function(data) {\r\n                if (me.get(\'waiting\') !== waiting) {\r\n                    return;\r\n                }\r\n            var values=data[CONFIG.parametric_field.toUpperCase()];\r\n            for (var key in values){\r\n                console.log(\"PUSHING KEY\");\r\n                me.pushObject({\'value\':key,\'count\':values[key]});\r\n            }\r\n                //console.log(me)\r\n            }, \"json\");\r\n    \r\n    \r\n        */\r\n        }\r\n    });\n  });//# sourceURL=iod-ember/controllers/facets.js");

;eval("define(\"iod-ember/controllers/recentsearches\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /** \r\n        RecentSearchesController\r\n        \r\n    **/\r\n    \r\n    __exports__[\"default\"] = Ember.ArrayController.extend({\r\n        content: [],\r\n        needs: [\"application\"],\r\n    \r\n        // called on new search. Replaces if already searched.\r\n        addSearch: function(search) {\r\n            search = search[\"toString\"]().trim();\r\n            if (this.contains(search)) {\r\n                this.removeObject(search);\r\n            }\r\n            this.pushObject(search);\r\n        },\r\n    \r\n    \r\n        actions: {\r\n            // Called on clicking of recent search. transitions to search route for that specific search\r\n            searchAgain: function(recentsearch) {\r\n    \r\n                this.transitionToRoute(\'search\', {\r\n                    query: recentsearch,\r\n                });\r\n    \r\n            }\r\n        },\r\n        // reverse used for recent ordering.\r\n        reverse: function() {\r\n            return this.toArray().reverse();\r\n        }.property(\'@each\')\r\n    });\n  });//# sourceURL=iod-ember/controllers/recentsearches.js");

;eval("define(\"iod-ember/controllers/result\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    \r\n    __exports__[\"default\"] = Ember.ObjectController.extend({\r\n        //sentimentvalue: null,\r\n        needs: [\"results\"],\r\n    \r\n        encodedRef: function() {\r\n            return encodeURIComponent(this.get(\'reference\'));\r\n    \r\n        }.property(\'reference\'),\r\n        titleLength: function() {\r\n            return this.get(\'title\').length;\r\n        }.property(\'title\'),\r\n    \r\n        actions: {\r\n            sentiment: function() {\r\n                var text = this.get(\'summary\') + \" \"+ this.get(\'title\');\r\n                var self = this;\r\n    \r\n                var data = {\r\n                    \'text\': text\r\n                };\r\n                var callback = function(data) {\r\n                    //console.log(data.entities);\r\n                    self.set(\'content.sentimentvalue\', data);\r\n    \r\n                };\r\n    \r\n                this.get(\'iodadapter\').call(\'analyzesentiment\',data,callback);\r\n                \r\n            },\r\n    \r\n        },\r\n        allSentimentObserver: function() {\r\n            this.send(\"sentiment\");\r\n        }.observes(\"controllers.results.sentiment\")\r\n    \r\n    });\n  });//# sourceURL=iod-ember/controllers/result.js");

;eval("define(\"iod-ember/controllers/results\", \n  [\"ember\",\"iod-ember/models/result\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    var Result = __dependency2__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.ArrayController.extend({\r\n        content: [],\r\n        username: \'\',\r\n        waiting: 0,\r\n        needs: [\"application\"],\r\n        entities: [],\r\n        sentiment: false,\r\n        itemController: \'result\',\r\n        actions: {\r\n            loadentities: function(e) {\r\n                //   //console.log(this.get(\"entities\"))\r\n                //if (!(e.type  in this.get(\"entities\"))){ \r\n                var entities = this.get(\"entities\");\r\n                if (!(e.type in this.get(\"entities\"))) {\r\n                    entities.pushObject(e.type);\r\n                }\r\n                //this.set(\"entities\",entities.toArray)\r\n    \r\n    \r\n            },\r\n            sentimentAll: function() {\r\n                this.set(\"sentiment\", true);\r\n            },\r\n        },\r\n        loadResults: function(search) {\r\n            var me = this;\r\n    \r\n            //ar search = App.SearchController.get(\'query\');\r\n            var waiting = Math.floor(Math.random() * 100) + 1;\r\n            this.set(\"waiting\", waiting);\r\n    \r\n            //console.log(\"RESULTS\")\r\n            var entitiesdefault = this.get(\"controllers.application.entitiesdefault\");\r\n            //var api = \"f272e588-7808-4fbf-a5e3-0c67d3c70eb2\"\r\n            //App.RecentUsersController.addUser(search);\r\n            //console.log(\"posting\");\r\n            me.set(\'content\', []);\r\n            var data={\r\n                \'text\': search.text,\r\n                \'field_text\': search.facets,\r\n                \'summary\': \'context\',\r\n                \'highlight\': \'summary_terms\',\r\n                    \'print\':\'all\'};\r\n    \r\n            var callback= function(response) {\r\n    \r\n                var doc;\r\n                if (me.get(\'waiting\') !== waiting) {\r\n                    return;\r\n                }\r\n                for (var i = 0; i < response.documents.length; i++) {\r\n                    doc = response.documents[i];\r\n                    doc[\"data\"] = doc[\"content\"];\r\n                    doc[\"entitiesdefault\"] = entitiesdefault;\r\n                    if (!(doc[\"summary\"])) {\r\n                        if (doc[\"content\"]){\r\n                                if (doc[\"content\"][\"DESCRIPTION\"]){\r\n                                    doc[\"summary\"] = doc[\"content\"][\"DESCRIPTION\"];\r\n                                }\r\n                                else{\r\n                                   doc[\"summary\"] = doc[\"content\"][\"DESCRIPTION\"];\r\n    \r\n                                }\r\n    \r\n                                doc[\"summary\"]= htmlDecode(htmlDecode(doc[\"summary\"]));\r\n                        }\r\n                        else {\r\n                            doc[\"summary\"]=\"\";\r\n                        }\r\n                    }       \r\n                    //doc[\"text\"] = htmlDecode(htmlDecode(doc[\"content\"][\"DESCRIPTION\"]))\r\n                    delete doc[\"content\"];\r\n    \r\n                    me.pushObject(Result.create(doc));\r\n                }\r\n            };\r\n                //console.log(search);\r\n            this.get(\'iodadapter\').call(\'querytextindex\',data,callback);\r\n    \r\n    \r\n    \r\n        }\r\n    \r\n    });\n  });//# sourceURL=iod-ember/controllers/results.js");

;eval("define(\"iod-ember/models/result\", \n  [\"ember\",\"iod-ember/models/entity\",\"iod-ember/controllers/entities\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Entity = __dependency2__[\"default\"];\n\n    var EntitiesController = __dependency3__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Object.extend({\r\n        sentimentvalue: null,\r\n        extractedentities: null,\r\n        entitiesdefault: null,\r\n        init: function() {\r\n            //console.log(this.get(\'controller\'))\r\n            var ap = EntitiesController.create({\r\n                \"content\": []\r\n            });\r\n            ap.pushObjects(this.get(\"entitiesdefault\").slice().map(function(obj) {\r\n                return Entity.create().setProperties(obj);\r\n            }));\r\n    \r\n            this.set(\"extractedentities\", ap);\r\n    \r\n    \r\n    \r\n        }\r\n    \r\n    });\n  });//# sourceURL=iod-ember/models/result.js");

;eval("define(\"iod-ember/models/entity\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /**\r\n        Entity model, probably needs to be reengineered.\r\n    **/\r\n    \r\n    __exports__[\"default\"] = Ember.Object.extend({\r\n    /*\r\n        extract: function(text) {\r\n    \r\n            var self = this;\r\n    \r\n    \r\n            Ember.$.post(apiurl + \"/1/api/sync/extractentities/v1\", {\r\n                \'apikey\': apikey,\r\n                \'text\': text,\r\n                \'entity_type\': self.type,\r\n            }, function(response) {\r\n                var results = [];\r\n                for (var i = 0; i < response[\"entities\"].length; i++) {\r\n                    results.push(response[\"entities\"][i].normalized_text);\r\n                }\r\n                self.returnedEntities = results.join(\", \");\r\n                //console.log(self)\r\n                //extractedentities.pushObject(entity);\r\n    \r\n            }, \"json\");\r\n        }\r\n        */\r\n    });\n  });//# sourceURL=iod-ember/models/entity.js");

;eval("define(\"iod-ember/controllers/search\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /**\r\n        @class SearchController\r\n    \r\n        contains the 3 controllers required for the search, results, clusters and facets.\r\n        propagates search command to the others\r\n    **/\r\n    __exports__[\"default\"] = Ember.ObjectController.extend({\r\n        results: null,\r\n        clusters: null,\r\n        facets: null,\r\n        recentsearches: null,\r\n        currentfacet: \"\",\r\n    \r\n        needs: \"application\",\r\n    \r\n        actions: {\r\n    \r\n            clustersearch: function(e) {\r\n                var query = \"(\"+this.get(\'controllers.application.text\') + \") AND \" + \'\"\' + e + \'\"\';\r\n                this.transitionToRoute(\'search\', {\r\n                    query: query,\r\n                });\r\n            },\r\n            search: function(obj) {\r\n    \r\n                console.log(obj);\r\n                //if (obj) \r\n                //   {console.log(obj.facet)}\r\n                var facets = obj && obj.facet || \"\";\r\n    \r\n                var query = {\r\n                    \'text\': this.get(\'controllers.application.text\'),\r\n                    \'facets\': facets\r\n                };\r\n                this.get(\'recentsearches\').addSearch(query.text);\r\n    \r\n                this.get(\'results\').loadResults(query); \r\n                this.get(\'clusters\').loadClusters(query);\r\n                this.get(\'facets\').loadFacets(query);\r\n            },\r\n    \r\n            facetsearch: function(e) {\r\n                var facet;\r\n                if (e === \"reset\") {\r\n                    facet = \"\";\r\n                } else {\r\n                    facet = \"MATCH{\" + e + \"}:\" + this.get(\'iodadapter.parametric_field\');\r\n                }\r\n                this.send(\'search\', {\r\n                    \'facet\': facet\r\n                });\r\n            }\r\n        }\r\n    });\n  });//# sourceURL=iod-ember/controllers/search.js");

;eval("define(\"iod-ember/helpers/math-op\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n     var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Handlebars.makeBoundHelper(\r\n     function(lvalue, operator, rvalue, options) {\r\n        lvalue = parseFloat(lvalue);\r\n        rvalue = parseFloat(rvalue);\r\n            \r\n        return {\r\n            \"+\": lvalue + rvalue,\r\n            \"-\": lvalue - rvalue,\r\n            \"*\": lvalue * rvalue,\r\n            \"/\": lvalue / rvalue,\r\n            \"%\": lvalue % rvalue\r\n        }[operator];\r\n     }\r\n    \r\n    	);\n  });//# sourceURL=iod-ember/helpers/math-op.js");

;eval("define(\"iod-ember/initializers/iodadapter\", \n  [\"iod-ember/models/iodadapter\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var IODAdapter = __dependency1__[\"default\"];\n\n    \r\n    \r\n    __exports__[\"default\"] = {\r\n      name: \"iodadapter\",\r\n    \r\n      initialize: function(container, application) {\r\n        container.typeInjection(\'component\', \'store\', \'store:main\');\r\n        application.register(\'iod:adapter\', IODAdapter, {singleton: true});\r\n        application.inject(\'controller\', \'iodadapter\', \'iod:adapter\');\r\n      }\r\n    };\n  });//# sourceURL=iod-ember/initializers/iodadapter.js");

;eval("define(\"iod-ember/models/iodadapter\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Object.extend({\r\n        apikey: \"apikey\",\r\n        apiurl: \"https://api.idolondemand.com\",\r\n        // The index we created and indexed into\r\n        apiindex: \"news_eng\",\r\n    \r\n        parametric_field: \"rss_category\",\r\n        // Fields we\'ll want to display in individual document results\r\n        \r\n    \r\n    \r\n       printfields: [\"rss_category\"],\r\n    \r\n      //comic_series\r\n      //  printfields: [\"created_by_name\", \"publisher_name\", \"featured_characters_name\"],\r\n    \r\n    \r\n        call: function(handler, data, callback) {\r\n            data.apikey = this.get(\'apikey\');\r\n            data.indexes = this.get(\'apiindex\');\r\n            var apiurl = this.get(\'apiurl\') + \"/1/api/sync/\" + handler + \"/v1\";\r\n            return Ember.$.post(apiurl, data, callback, \"json\");\r\n        },\r\n    \r\n        callhtml: function(handler, data, callback) {\r\n            data.apikey = this.get(\'apikey\');\r\n            data.indexes = this.get(\'apiindex\');\r\n            var apiurl = this.get(\'apiurl\') + \"/1/api/sync/\" + handler + \"/v1\";\r\n            return Ember.$.post(apiurl, data, callback, \"html\");\r\n        },\r\n    \r\n        formcall: function(handler, fd, callback) {\r\n            fd.append(\'apikey\', this.get(\'apikey\'));\r\n            return Ember.$.ajax({\r\n                url: this.get(\'apiurl\') + \'/1/api/sync/\'+handler+\'/v1\',\r\n                data: fd,\r\n                processData: false,\r\n                contentType: false,\r\n                type: \'POST\',\r\n                success: callback\r\n            });\r\n        }\r\n    });\n  });//# sourceURL=iod-ember/models/iodadapter.js");

;eval("define(\"iod-ember/router\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    var Router = Ember.Router.extend({\r\n      location: IodEmberENV.locationType\r\n    });\r\n    \r\n    Router.map(function() {\r\n      \r\n        this.route(\'document\', {\r\n            \'path\': \'document/:reference\'\r\n        });\r\n    \r\n        this.resource(\'search\', {\r\n            \'path\': \'search/:query\',\r\n    \r\n        });\r\n    \r\n        \r\n    });\r\n    \r\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=iod-ember/router.js");

;eval("define(\"iod-ember/routes/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /**\r\n    	Application route\r\n    \r\n    	initializes autocomplete controller\r\n    	\r\n    **/\r\n    \r\n    var ApplicationRoute = Ember.Route.extend({\r\n    \r\n        setupController: function(controller) {\r\n            var autocompleteController = this.controllerFor(\'autocomplete\');\r\n            controller.set(\'autocomplete\', autocompleteController);\r\n    \r\n        }\r\n    });\r\n    \r\n    \r\n    __exports__[\"default\"] = ApplicationRoute;\n  });//# sourceURL=iod-ember/routes/application.js");

;eval("define(\"iod-ember/routes/document\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    \r\n    /**\r\n    	Document route, used for individual document view\r\n    **/\r\n    \r\n    var DocumentRoute = Ember.Route.extend({\r\n    \r\n    \r\n    \r\n        setupController: function(controller, model) {\r\n    \r\n        	// should set \'model\'? \r\n            controller.set(\'reference\', decodeURIComponent(model.reference));\r\n            controller.loadData();\r\n        }\r\n    });\r\n    \r\n    \r\n    \r\n    __exports__[\"default\"] = DocumentRoute;\n  });//# sourceURL=iod-ember/routes/document.js");

;eval("define(\"iod-ember/routes/search\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    /**\r\n        Search Route\r\n    \r\n    **/\r\n    var SearchRoute = Ember.Route.extend({\r\n    \r\n        // creates and injects search dependant controllers and injects them into the route\'s searchcontroller.\r\n        setupController: function(controller, model) {\r\n    \r\n            controller.set(\"controllers.application.text\", model.query);\r\n    \r\n            //console.log(model)\r\n           // controller.set(\'page\',parseInt(model.page));\r\n            var results = this.controllerFor(\'results\');\r\n            var clusters = this.controllerFor(\'clusters\');\r\n            var facets = this.controllerFor(\'facets\');\r\n    \r\n            var recentsearches = this.controllerFor(\'recentsearches\');\r\n            controller.set(\'results\', results);\r\n            controller.set(\'clusters\', clusters);\r\n            controller.set(\'facets\', facets);\r\n    \r\n            controller.set(\'recentsearches\', recentsearches);\r\n            //console.log(recentsearches);\r\n            controller.send(\'search\');\r\n            \r\n        },\r\n    \r\n    \r\n    \r\n    });\r\n    \r\n    \r\n    __exports__[\"default\"] = SearchRoute;\n  });//# sourceURL=iod-ember/routes/search.js");

;eval("define(\"iod-ember/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n            <span class=\\\"tt-dropdown-menu\\\">\\r\\n            <div class=\\\"tt-dataset-repos\\\"> <div class=\\\"tt-suggestions\\\">\\r\\n            \");\n      stack1 = helpers.each.call(depth0, \"autocomplete\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n            </div>\\r\\n            </div>\\r\\n            </span>\\r\\n            \");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\r\\n            <div class=\\\"tt-suggestion\\\">\\r\\n            <a  \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"ac_click\", \"\", {hash:{\n        \'target\': (\"controller\")\n      },hashTypes:{\'target\': \"STRING\"},hashContexts:{\'target\': depth0},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\" >\\r\\n            \");\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"title\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\r\\n               </a>                \\r\\n                        </div>\\r\\n            \");\n      return buffer;\n      }\n\n      data.buffer.push(\"        <div class=\\\"navbar navbar-inverse navbar-fixed-top\\\" role=\\\"navigation\\\">\\r\\n        <div class=\\\"container-fluid\\\">\\r\\n            <div class=\\\"navbar-header\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"navbar-toggle\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse\\\">\\r\\n                    <span class=\\\"sr-only\\\">Toggle navigation</span>\\r\\n                    <span class=\\\"icon-bar\\\"></span>\\r\\n                    <span class=\\\"icon-bar\\\"></span>\\r\\n                    <span class=\\\"icon-bar\\\"></span>\\r\\n                </button>\\r\\n                <a class=\\\"navbar-brand\\\" href=\\\"#\\\">IOD Search</a>\\r\\n            </div>\\r\\n            <div class=\\\"navbar-collapse collapse\\\">\\r\\n\\r\\n\\r\\n            \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"searchtext\", {hash:{\n        \'placeholder\': (\"Search\"),\n        \'valueBinding\': (\"controller.text\")\n      },hashTypes:{\'placeholder\': \"STRING\",\'valueBinding\': \"STRING\"},hashContexts:{\'placeholder\': depth0,\'valueBinding\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"\\r\\n\\r\\n            \");\n      stack1 = helpers[\'if\'].call(depth0, \"autocomplete\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n            </div>\\r\\n\\r\\n        \");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=iod-ember/templates/application.js");

;eval("define(\"iod-ember/templates/cluster\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n                      <li><a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clustersearch\", \"text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\"><span class=\\\"badge pull-right\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"docs_with_phrase\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span>\");\n      stack1 = helpers._triageMustache.call(depth0, \"text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a></li>\\r\\n                    \");\n      return buffer;\n      }\n\n      data.buffer.push(\"\\r\\n                    <a data-toggle=\\\"collapse\\\" href=\\\"#subcluster-\");\n      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"_view.contentIndex\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\\"><span class=\\\"badge pull-right\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"totaldocs\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span>\");\n      stack1 = helpers._triageMustache.call(depth0, \"docs.firstObject.text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a>\\r\\n                    <div id=\\\"subcluster-\");\n      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"_view.contentIndex\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\\" class=\\\"panel-collapse subnav collapse\\\" >\\r\\n                    <ul>\\r\\n                    \");\n      stack1 = helpers.each.call(depth0, \"docs\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                    </ul>\\r\\n                    </div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=iod-ember/templates/cluster.js");

;eval("define(\"iod-ember/templates/document\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n                            <li><a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"entity\", \"\", {hash:{\n        \'target\': (\"controller\")\n      },hashTypes:{\'target\': \"STRING\"},hashContexts:{\'target\': depth0},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"display\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a></li>\\r\\n                            \");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\r\\n<div class=\\\"panel panel-default\\\">\\r\\n            <div class=\\\"panel-heading\\\">\\r\\n              <h3 class=\\\"panel-title\\\">   \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"document\", \"reference\", options) : helperMissing.call(depth0, \"link-to\", \"document\", \"reference\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n</h3>\\r\\n            </div>\\r\\n            <div class=\\\"panel-body\\\">\\r\\n              \");\n      stack1 = helpers._triageMustache.call(depth0, \"summary\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n            </div>\\r\\n          </div>\\r\\n                \");\n      return buffer;\n      }\n    function program4(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"               \");\n      stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" \");\n      return buffer;\n      }\n\n    function program6(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\r\\n\\r\\n              \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"iframe\", {hash:{\n        \'controllerBinding\': (\"this\")\n      },hashTypes:{\'controllerBinding\': \"STRING\"},hashContexts:{\'controllerBinding\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"\\r\\n\\r\\n              \");\n      return buffer;\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n\\r\\n     		  <h1>\");\n      stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</h1>\\r\\n\\r\\n     		   \");\n      stack1 = helpers.each.call(depth0, \"customfields\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\\r\\n            <div class=\\\"jumbotron\\\">\\r\\n              \");\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"content_html\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\r\\n             </div>\\r\\n              \");\n      return buffer;\n      }\n    function program9(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n\\r\\n\\r\\n     		  <h2><strong>\");\n      stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" :</strong> \");\n      stack1 = helpers._triageMustache.call(depth0, \"value\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</h2>\\r\\n            \");\n      return buffer;\n      }\n\n      data.buffer.push(\"\\r\\n    <div class=\\\"container-fluid full\\\">\\r\\n        <div class=\\\"row full\\\">\\r\\n\\r\\n            <div class=\\\"col-sm-3 col-md-4 sidebar\\\">\\r\\n                <h1 class=\\\"page-header\\\">Tools</h1>\\r\\n\\r\\n                <div id=\\\"result-main\\\">\\r\\n                <button type=\\\"button\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sentiment\", {hash:{\n        \'target\': (\"controller\")\n      },hashTypes:{\'target\': \"STRING\"},hashContexts:{\'target\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn-sentiment btn btn-sm btn-primary\\\">Sentiment Analysis</button>\\r\\n\\r\\n                <div class=\\\"btn-group\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\r\\n                        Entity Extraction\\r\\n                        <span class=\\\"caret\\\"></span>\\r\\n                    </button>\\r\\n                        <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\r\\n\\r\\n                            \");\n      stack1 = helpers.each.call(depth0, \"controllers.application.entitiesdefault\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                        </ul> \\r\\n                </div>\\r\\n\\r\\n                <div>\\r\\n                    <span> Highlight </span>\\r\\n             \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"highlight\", {hash:{\n        \'placeholder\': (\"highlight\"),\n        \'valueBinding\': (\"controller.highlighttext\")\n      },hashTypes:{\'placeholder\': \"STRING\",\'valueBinding\': \"STRING\"},hashContexts:{\'placeholder\': depth0,\'valueBinding\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"\\r\\n                </div>\\r\\n                <h1 class=\\\"page-header\\\">Similar Docs</h1>\\r\\n\\r\\n                \");\n      stack1 = helpers.each.call(depth0, \"similardocs\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\\r\\n            </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-sm-9 col-sm-offset-3 col-md-8 col-md-offset-4 main full\\\"> \\r\\n\\r\\n\\r\\n               \");\n      stack1 = helpers[\'if\'].call(depth0, \"islink\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                        </div>\\r\\n\\r\\n        </div>\\r\\n    </div>  \");\n      return buffer;\n      \n    });\n  });//# sourceURL=iod-ember/templates/document.js");

;eval("define(\"iod-ember/templates/facet\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"   <span><i class=\\\"icon-minus-sign\\\"></i> \");\n      stack1 = helpers._triageMustache.call(depth0, \"value\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span> <a \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"facetsearch\", \"value\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"count\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=iod-ember/templates/facet.js");

;eval("define(\"iod-ember/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"    <div class=\\\"container\\\">\\r\\n      <div class=\\\"jumbotron\\\">\\r\\n        <h1>Welcome!</h1>\\r\\n        <p>This is a Ember.js template for a simple search interfance for IDOL OnDemand Indexes </p>\\r\\n        <p><a href=\\\"http://idolondemand.com\\\" class=\\\"btn btn-primary btn-lg\\\" role=\\\"button\\\">Learn more &raquo;</a></p>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"page-header\\\">\\r\\n        <h1>Configuration</h1>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <p>\\r\\n        In the app/models/iodadapter.js file you\'ll want to change a few values\\r\\n\\r\\n        <ul>\\r\\n        <li><strong>Apikey :</strong> Set the value of your apikey here</li>\\r\\n        <li><strong>Apiurl :</strong> Make sure this is set to \\\"http://api.idolondemand.com\\\"</li>\\r\\n        <li><strong>Apiindex :</strong> Make sure this is set to the index you want to query. If you don\'t have an index yet, try news-eng</li>\\r\\n        <li><strong>parametric_field :</strong> Beta Feature - Currently only the category field is supported for custom indexes</li>\\r\\n        <li><strong>printfields :</strong> Beta Feature - The fields that will diplay in the doucment view</li>\\r\\n\\r\\n        </ul>\\r\\n\\r\\n        </p>\\r\\n\\r\\n      </div>\\r\\n\\r\\n    </div>\");\n      \n    });\n  });//# sourceURL=iod-ember/templates/index.js");

;eval("define(\"iod-ember/templates/result\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n                <div class=\\\"col-md-12 content\\\">\\r\\n                Sentiment: \");\n      stack1 = helpers._triageMustache.call(depth0, \"sentimentvalue.aggregate.sentiment\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                </div>\\r\\n                \");\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n\\r\\n                <div class=\\\"col-md-12 content\\\">\\r\\n                Entities - \");\n      stack1 = helpers._triageMustache.call(depth0, \"display\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" : \");\n      stack1 = helpers._triageMustache.call(depth0, \"returnedEntities\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                </div>\\r\\n\\r\\n                \");\n      return buffer;\n      }\n\n    function program7(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n                \");\n      stack1 = helpers[\'if\'].call(depth0, \"returnedEntities\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                \");\n      return buffer;\n      }\n    function program8(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n                <div class=\\\"col-md-12 content\\\">\\r\\n                Entities - \");\n      stack1 = helpers._triageMustache.call(depth0, \"display\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" : \");\n      stack1 = helpers._triageMustache.call(depth0, \"returnedEntities\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                </div>\\r\\n                \");\n      return buffer;\n      }\n\n    function program10(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n                            <li><a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"entity\", {hash:{\n        \'target\': (\"controller\")\n      },hashTypes:{\'target\': \"STRING\"},hashContexts:{\'target\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"display\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a></li>\\r\\n\\r\\n                            \");\n      return buffer;\n      }\n\n      data.buffer.push(\"\\r\\n    <div class=\\\"row result-element\\\">\\r\\n        <div class=\\\"col-md-1\\\">\");\n      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"_view.pos\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"</div>\\r\\n        <div class=\\\"col-md-1\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"category\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</div>\\r\\n        <div class=\\\"col-md-10\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-12 title\\\">\\r\\n                    \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"document\", \"encodedRef\", options) : helperMissing.call(depth0, \"link-to\", \"document\", \"encodedRef\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                </div>\\r\\n                <div class=\\\"col-md-12 content\\\">\\r\\n                 \");\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"summary\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\r\\n                </div>  \\r\\n                \");\n      stack1 = helpers[\'if\'].call(depth0, \"sentimentvalue\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\\r\\n                \");\n      stack1 = helpers.each.call(depth0, \"entitiescontroller\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\\r\\n\\r\\n                \");\n      stack1 = helpers.each.call(depth0, \"extractedentities\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\\r\\n\\r\\n                <div style=\\\"display:none\\\" class=\\\"col-md-12 extra-content\\\">\\r\\n                 \\r\\n                </div>\\r\\n                <div class=\\\"col-md-12 btn-iod\\\">\\r\\n                    <button type=\\\"button\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sentiment\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn-sentiment btn btn-sm btn-primary\\\">Sentiment Analysis</button>\\r\\n                    <div class=\\\"btn-group\\\">\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-sm dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\r\\n                            Entity Extraction\\r\\n                            <span class=\\\"caret\\\"></span>\\r\\n                        </button>\\r\\n\\r\\n                        <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\r\\n\\r\\n                            \");\n      stack1 = helpers.each.call(depth0, \"extractedentities\", {hash:{\n        \'itemController\': (\"entity\")\n      },hashTypes:{\'itemController\': \"STRING\"},hashContexts:{\'itemController\': depth0},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                        </ul> \\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=iod-ember/templates/result.js");

;eval("define(\"iod-ember/templates/search\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n\\r\\n                <li>\\r\\n                    <a href=\\\"#\\\" title=\\\"view again\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"searchAgain\", \"\", {hash:{\n        \'target\': (\"controller.recentsearches\")\n      },hashTypes:{\'target\': \"STRING\"},hashContexts:{\'target\': depth0},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a>\\r\\n                </li>\\r\\n            \");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n                        <li><a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"loadentities\", \"\", {hash:{\n        \'target\': (\"controller.results\")\n      },hashTypes:{\'target\': \"STRING\"},hashContexts:{\'target\': depth0},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"display\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a></li>\\r\\n\\r\\n                        \");\n      return buffer;\n      }\n\n      data.buffer.push(\"\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n\\r\\n            <div class=\\\"col-sm-3 col-md-2 sidebar\\\">\\r\\n\\r\\n            <h2> Recent Searches</h2>\\r\\n                            <ul class=\\\"nav nav-sidebar\\\" id=\\\"cluster-nav\\\">\\r\\n\\r\\n            \");\n      stack1 = helpers.each.call(depth0, \"recentsearches\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                </ul>\\r\\n\\r\\n                <h2>Clusters</h2>\\r\\n                <ul class=\\\"nav nav-sidebar\\\" id=\\\"cluster-nav\\\">\\r\\n\\r\\n\");\n      data.buffer.push(escapeExpression(helpers.each.call(depth0, \"clusters\", {hash:{\n        \'itemView\': (\"Cluster\")\n      },hashTypes:{\'itemView\': \"STRING\"},hashContexts:{\'itemView\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\r\\n                </ul>\\r\\n\\r\\n\\r\\n            <h2> Facets</h2>\\r\\n\\r\\n<div class=\\\"tree\\\">\\r\\n    <ul>\\r\\n\\r\\n\\r\\n        <li>\\r\\n            <span><i class=\\\"icon-folder-open\\\"></i>\");\n      stack1 = helpers._triageMustache.call(depth0, \"facets.field_name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span><a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"facetsearch\", \"reset\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data})));\n      data.buffer.push(\">Reset</a>\\r\\n            <ul>\\r\\n            \");\n      data.buffer.push(escapeExpression(helpers.each.call(depth0, \"facets\", {hash:{\n        \'itemView\': (\"Facet\")\n      },hashTypes:{\'itemView\': \"STRING\"},hashContexts:{\'itemView\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\r\\n            </ul>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>\\r\\n\\r\\n\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\\\">   \\r\\n                <h1 class=\\\"page-header\\\">Tools</h1>\\r\\n\\r\\n                <div id=\\\"result-main\\\">\\r\\n                <button type=\\\"button\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sentimentAll\", {hash:{\n        \'target\': (\"results\")\n      },hashTypes:{\'target\': \"STRING\"},hashContexts:{\'target\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn-sentiment btn btn-sm btn-primary\\\">Sentiment Analysis</button>\\r\\n\\r\\n                <div class=\\\"btn-group\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\r\\n                        Entity Extraction\\r\\n                        <span class=\\\"caret\\\"></span>\\r\\n                    </button>\\r\\n\\r\\n                    <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\r\\n\\r\\n                        \");\n      stack1 = helpers.each.call(depth0, \"controllers.application.entitiesdefault\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n                    </ul> \\r\\n                </div>\\r\\n\\r\\n                <h1 class=\\\"page-header\\\">Results</h1>\\r\\n\\r\\n\\r\\n\");\n      data.buffer.push(escapeExpression(helpers.each.call(depth0, \"results\", {hash:{\n        \'itemView\': (\"result\")\n      },hashTypes:{\'itemView\': \"STRING\"},hashContexts:{\'itemView\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\r\\n\\r\\n\\r\\n<!--\\r\\n<ul class=\\\"pagination\\\">\\r\\n  <li class=\\\"disabled\\\"><a href=\\\"#\\\">&laquo;</a></li>\\r\\n\\r\\n  <li class=\\\"active\\\"><a href=\\\"#\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"page\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" <span class=\\\"sr-only\\\">(current)</span></a></li>\\r\\n  <li>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'math-op\'] || (depth0 && depth0[\'math-op\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:[\"ID\",\"STRING\",\"STRING\"],data:data},helper ? helper.call(depth0, \"page\", \"+\", \"1\", options) : helperMissing.call(depth0, \"math-op\", \"page\", \"+\", \"1\", options))));\n      data.buffer.push(\" </a></li>\\r\\n\\r\\n</ul>\\r\\n-->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>    \\r\\n    \");\n      return buffer;\n      \n    });\n  });//# sourceURL=iod-ember/templates/search.js");

;eval("define(\"iod-ember/tests/helpers/resolver\", \n  [\"ember/resolver\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n\n    \r\n    var resolver = Resolver.create();\r\n    \r\n    resolver.namespace = {\r\n      modulePrefix: \'iod-ember\'\r\n    };\r\n    \r\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=iod-ember/tests/helpers/resolver.js");

;eval("define(\"iod-ember/tests/helpers/start-app\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global require */\r\n    \r\n    var Application = require(\'iod-ember/app\')[\'default\'];\r\n    var Router = require(\'iod-ember/router\')[\'default\'];\r\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = function startApp(attrs) {\r\n      var App;\r\n    \r\n      var attributes = Ember.merge({\r\n        // useful Test defaults\r\n        rootElement: \'#ember-testing\',\r\n        LOG_ACTIVE_GENERATION:false,\r\n        LOG_VIEW_LOOKUPS: false\r\n      }, attrs); // but you can override;\r\n    \r\n      Router.reopen({\r\n        location: \'none\'\r\n      });\r\n    \r\n      Ember.run(function(){\r\n        App = Application.create(attributes);\r\n        App.setupForTesting();\r\n        App.injectTestHelpers();\r\n      });\r\n    \r\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\r\n    \r\n      return App;\r\n    }\n  });//# sourceURL=iod-ember/tests/helpers/start-app.js");

;eval("define(\"iod-ember/tests/iod-ember/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember\');\n    test(\'iod-ember/app.js should pass jshint\', function() { \n      ok(true, \'iod-ember/app.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/app.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/application.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/application.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/autocomplete.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/autocomplete.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/autocomplete.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/autocomplete.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/clusters.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/clusters.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/clusters.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/clusters.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/document.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/document.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/document.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/document.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/entities.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/entities.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/entities.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/entities.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/entity.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/entity.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/entity.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/entity.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/facets.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/facets.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/facets.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/facets.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/recentsearches.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/recentsearches.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/recentsearches.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/recentsearches.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/result.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/result.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/result.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/result.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/results.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/results.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/results.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/results.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/controllers/search.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/controllers\');\n    test(\'iod-ember/controllers/search.js should pass jshint\', function() { \n      ok(true, \'iod-ember/controllers/search.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/controllers/search.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/helpers/math-op.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/helpers\');\n    test(\'iod-ember/helpers/math-op.js should pass jshint\', function() { \n      ok(false, \'iod-ember/helpers/math-op.js should pass jshint.\\niod-ember/helpers/math-op.js: line 4, col 44, \\\'options\\\' is defined but never used.\\n\\n1 error\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/helpers/math-op.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/initializers/iodadapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/initializers\');\n    test(\'iod-ember/initializers/iodadapter.js should pass jshint\', function() { \n      ok(true, \'iod-ember/initializers/iodadapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/initializers/iodadapter.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/models/entity.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/models\');\n    test(\'iod-ember/models/entity.js should pass jshint\', function() { \n      ok(true, \'iod-ember/models/entity.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/models/entity.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/models/iodadapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/models\');\n    test(\'iod-ember/models/iodadapter.js should pass jshint\', function() { \n      ok(true, \'iod-ember/models/iodadapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/models/iodadapter.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/models/result.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/models\');\n    test(\'iod-ember/models/result.js should pass jshint\', function() { \n      ok(true, \'iod-ember/models/result.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/models/result.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember\');\n    test(\'iod-ember/router.js should pass jshint\', function() { \n      ok(true, \'iod-ember/router.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/router.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/routes\');\n    test(\'iod-ember/routes/application.js should pass jshint\', function() { \n      ok(true, \'iod-ember/routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/routes/application.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/routes/document.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/routes\');\n    test(\'iod-ember/routes/document.js should pass jshint\', function() { \n      ok(true, \'iod-ember/routes/document.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/routes/document.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/routes/search.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/routes\');\n    test(\'iod-ember/routes/search.js should pass jshint\', function() { \n      ok(true, \'iod-ember/routes/search.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/routes/search.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/tests/helpers\');\n    test(\'iod-ember/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'iod-ember/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/tests/helpers/resolver.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/tests/helpers\');\n    test(\'iod-ember/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'iod-ember/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/tests/helpers/start-app.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/tests\');\n    test(\'iod-ember/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'iod-ember/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/tests/test-helper.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/utils/iodmodule.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/utils\');\n    test(\'iod-ember/utils/iodmodule.js should pass jshint\', function() { \n      ok(true, \'iod-ember/utils/iodmodule.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/utils/iodmodule.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/application.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/application.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/cluster.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/cluster.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/cluster.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/cluster.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/document.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/document.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/document.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/document.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/facet.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/facet.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/facet.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/facet.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/highlight.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/highlight.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/highlight.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/highlight.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/iframe.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/iframe.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/iframe.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/iframe.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/result.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/result.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/result.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/result.jshint.js");

;eval("define(\"iod-ember/tests/iod-ember/views/searchtext.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - iod-ember/views\');\n    test(\'iod-ember/views/searchtext.js should pass jshint\', function() { \n      ok(true, \'iod-ember/views/searchtext.js should pass jshint.\'); \n    });\n  });//# sourceURL=iod-ember/tests/iod-ember/views/searchtext.jshint.js");

;eval("define(\"iod-ember/tests/test-helper\", \n  [\"iod-ember/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n\n    var setResolver = __dependency2__.setResolver;\n\n    \r\n    setResolver(resolver);\r\n    \r\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n  });//# sourceURL=iod-ember/tests/test-helper.js");

;eval("define(\"iod-ember/utils/iodmodule\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    /* jshint node: true */\r\n    \r\n    __exports__[\"default\"] = Ember.Object.extend({\r\n     	name:\"hello\",\r\n    	printname: function() {\r\n    \r\n    		console.log(this.name);\r\n    \r\n    	}\r\n    \r\n    });\n  });//# sourceURL=iod-ember/utils/iodmodule.js");

;eval("define(\"iod-ember/views/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n     \r\n    __exports__[\"default\"] = Ember.View.extend({\r\n    \r\n        classNames: [\"full\"]\r\n    });\n  });//# sourceURL=iod-ember/views/application.js");

;eval("define(\"iod-ember/views/cluster\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n     \r\n    __exports__[\"default\"] = Ember.View.extend({\r\n        tagName: \"li\",\r\n    \r\n        pos: function() {\r\n            return \"asasda\";\r\n        }.property(\'contentIndex\'),\r\n    \r\n        templateName: \"cluster\"\r\n    });\n  });//# sourceURL=iod-ember/views/cluster.js");

;eval("define(\"iod-ember/views/document\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n     \r\n    __exports__[\"default\"] = Ember.View.extend({\r\n    \r\n        classNames: [\"full\"]\r\n    });\n  });//# sourceURL=iod-ember/views/document.js");

;eval("define(\"iod-ember/views/facet\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n     \r\n    __exports__[\"default\"] = Ember.View.extend({\r\n        tagName: \"li\",\r\n    \r\n        pos: function() {\r\n            return \"asasda\";\r\n        }.property(\'contentIndex\'),\r\n    \r\n        templateName: \"facet\"\r\n    });\n  });//# sourceURL=iod-ember/views/facet.js");

;eval("define(\"iod-ember/views/highlight\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n     \r\n    __exports__[\"default\"] = Ember.TextField.extend({\r\n    \r\n    \r\n        insertNewline: function() {\r\n            var controller = this.get(\'targetObject\');\r\n            controller.send(\'highlight\');\r\n    \r\n        }\r\n    });\n  });//# sourceURL=iod-ember/views/highlight.js");

;eval("define(\"iod-ember/views/iframe\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n     \r\n    __exports__[\"default\"] = Ember.View.extend({\r\n        tagName: \"iframe\",\r\n        sandbox: \"allow-same-origin\",\r\n        attributeBindings: [\'style\', \'srcdoc\', \'sandbox\'],\r\n        style: \"width:100%; height:100%\",\r\n        srcdoc: function() {\r\n            //        console.log(this)\r\n            //       console.log(this.get(\'controller\'))\r\n            return this.get(\'controller.content\').html();\r\n            //return \"data:text/html;charset=utf-8,\" + escape(this.get(\'controller.content\').html());\r\n        }.property(\'controller.content\'),\r\n        highlightSentiment: function() {\r\n            //test=this\r\n            console.log(\"SENTIMENT\");\r\n            var iframebody;\r\n            iframebody = this.$().contents().find(\'body\');\r\n            Ember.$(this.get(\'controller.sentimentvalue.positive\')).each(function() {\r\n                iframebody.highlight(this.original_text, {\r\n                    \'element\': \'span\',\r\n                    \'className\': \"highlight positive\"\r\n                });\r\n    \r\n                //  self.set(\'content\', highlight(self.get(\'content\'), this.original_text, false, \'mark\', \'style=\"background-color:green;\"\'))\r\n            });\r\n            Ember.$(this.get(\'controller.sentimentvalue.negative\')).each(function() {\r\n                iframebody.highlight(this.original_text, {\r\n                    \'element\': \'span\',\r\n                    \'className\': \"highlight negative\"\r\n                });\r\n                //self.set(\'content\', highlight(self.get(\'content\'), this.original_text, false, \'mark\', \'style=\"background-color:red;\"\'))\r\n            });\r\n    \r\n            //console.log(this.$(\'body\'))\r\n            //console.log(\"I AM DOING STUFF\")\r\n        }.observes(\'controller.sentimentvalue\'),\r\n        highlightEntities: function() {\r\n            //test=this\r\n            var iframebody;\r\n            console.log(\"Entities\");\r\n            iframebody = this.$().contents().find(\'body\');\r\n    \r\n    \r\n            var entities = this.get(\'controller.entities\');\r\n            Ember.$(entities).each(function() {\r\n                iframebody.highlight(this.original_text, {\r\n                    \'element\': \'span\',\r\n                    \'className\': \"highlight \" + this.type\r\n                });\r\n    \r\n            });\r\n            //console.log(this.$(\'body\'))\r\n            //console.log(\"I AM DOING STUFF\")\r\n        }.observes(\'controller.entities.length\')\r\n    \r\n    \r\n    });\n  });//# sourceURL=iod-ember/views/iframe.js");

;eval("define(\"iod-ember/views/result\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n     \r\n    __exports__[\"default\"] = Ember.View.extend({\r\n        templateName: \"result\",\r\n    \r\n        pos: function() {\r\n            return this.get(\'contentIndex\') + 1;\r\n        }.property(\'contentIndex\'),\r\n    \r\n    \r\n    });\n  });//# sourceURL=iod-ember/views/result.js");

;eval("define(\"iod-ember/views/searchtext\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    \r\n    __exports__[\"default\"] = Ember.TextField.extend({\r\n    \r\n        // classNames: [\"form-control\"],\r\n        waiting: 0,\r\n    \r\n    \r\n        keyUp: function(e) {\r\n            if ([32].contains(e.keyCode)) {\r\n    \r\n                this.get(\'targetObject\').send(\'autocomplete\');\r\n                this.set(\"waiting\", 0);\r\n    \r\n            } else {\r\n    \r\n                var self = this;\r\n                var waiting = Math.floor(Math.random() * 100) + 1;\r\n                this.set(\"waiting\", waiting);\r\n                setTimeout(function() {\r\n                    self.acWait(waiting);\r\n                }, 1000);\r\n    \r\n                this.set(\'targetObject.autocomplete.content\', []);\r\n            }\r\n        },\r\n    \r\n        acWait: function(waiting) {\r\n            if (this.get(\'waiting\') === waiting) {\r\n                this.get(\'targetObject\').send(\'autocomplete\');\r\n            }\r\n        },\r\n    \r\n        insertNewline: function() {\r\n            this.set(\"waiting\", 0);\r\n            var controller = this.get(\'targetObject\');\r\n            controller.send(\'query\');\r\n    \r\n        }\r\n    });\n  });//# sourceURL=iod-ember/views/searchtext.js");
